package game;

import java.util.concurrent.TimeUnit;

import java.util.Timer;//kdjnvsjkldjksvnkcdfubinjvsce
import java.util.TimerTask;
import java.awt.Color;
import java.awt.Graphics;
import java.util.Iterator;
import java.util.Random;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.TimeUnit;

import javax.swing.*;

//import javax.swing.ImageIcon;
//import javax.swing.JLabel;
//import javax.swing.JPanel;

public class GameScence extends JPanel {

	private ImageIcon roadBackgroung;
	private ImageIcon myCar;
	private int x = 520, y = 470;
	private Car car1;
	private CustomRectangel rectangle;
	private ImageIcon whiteCar;
	int[] arr1 = new int[2];
	int[] arr2 = new int[2];
	private ImageIcon whiteCarOppositivePass;
	private CarObstacle[] carObstacleArr;
	private CarObstacleOppositePath[] carObstacleOppositePathArr;
	private RectangelObstacle[] rectangleObstacleArr;
	private RectangleObstacleOppositePath[] rectangleObstacleOppositePathArr;
	private int counter = 0;
	private JTextField nameTextField;

	public GameScence(int x, int y, int width, int height) {
		this.setBounds(x, y, width, height);
		this.roadBackgroung = new ImageIcon("medium.gif");
		this.setLayout(null);
		this.myCar = new ImageIcon("raceCar.png");
		this.setVisible(true);
		this.car1 = new Car(myCar, this.x, this.y);
		this.rectangle = new CustomRectangel(this.x, this.y, 115, 250, Color.blue);
		this.whiteCar = new ImageIcon("whiteCar.png");
		this.whiteCarOppositivePass = new ImageIcon("whiteCarOppositePath.png");

		arr1[0] = 530;
		arr1[1] = 680;
		arr2[0] = 210;
		arr2[1] = 360;
		
		int ycar = 0;
		this.carObstacleArr = new CarObstacle[100];
		this.rectangleObstacleArr = new RectangelObstacle[100];
		for (int i = 0; i < this.carObstacleArr.length; i++) {
			// CarObstacle carObstacleArrIndex = null;
			CarObstacle carObstacleArrIndex = new CarObstacle(whiteCar, getRandom(arr1), ycar - 700);
			this.carObstacleArr[i] = carObstacleArrIndex;
			int carObstacleArrIndexX = carObstacleArrIndex.getX();
			int carObstacleArrIndexY = carObstacleArrIndex.getY();

			// RectangelObstacle rectangleObstacleArrIndex = null;
			RectangelObstacle rectangleObstacleArrIndex = new RectangelObstacle(carObstacleArrIndexX,
					carObstacleArrIndexY, 105, 230, Color.blue);
			this.rectangleObstacleArr[i] = rectangleObstacleArrIndex;
			ycar = ycar - 700;
		}

		int ycaroppositive = 0;
		this.carObstacleOppositePathArr = new CarObstacleOppositePath[100];
		this.rectangleObstacleOppositePathArr = new RectangleObstacleOppositePath[100];
		for (int i = 0; i < this.carObstacleOppositePathArr.length; i++) {
			CarObstacleOppositePath carObstacleArrIndexoppositive = null;
			carObstacleArrIndexoppositive = new CarObstacleOppositePath(whiteCarOppositivePass, getRandom(arr2),
					ycaroppositive - 700);
			this.carObstacleOppositePathArr[i] = carObstacleArrIndexoppositive;
			int carObstacleArrIndexX = carObstacleArrIndexoppositive.getX();
			int carObstacleArrIndexY = carObstacleArrIndexoppositive.getY();

			RectangleObstacleOppositePath rectangleObstacleArrIndexoppositive = null;
			rectangleObstacleArrIndexoppositive = new RectangleObstacleOppositePath(carObstacleArrIndexX,
					carObstacleArrIndexY, 105, 230, Color.blue);
			this.rectangleObstacleOppositePathArr[i] = rectangleObstacleArrIndexoppositive;
			ycaroppositive = ycaroppositive - 700;
		}

		nameTextField = new JTextField();
		nameTextField.setBounds(0, 0, 150, 30);
		this.add(nameTextField);
		nameTextField.setText(String.valueOf(counter));

		this.mainGameLoop();
	}

	public void moveTheCars() {
        Thread t = new Thread(() -> {
            while (true) {
                for (int i = 0; i < carObstacleArr.length; i++) {
                    try {
                        carObstacleArr[i].setY(y+2);
                        rectangleObstacleArr[i].setY(y+2);
                        carObstacleOppositePathArr[i].setY(y+2);
                        rectangleObstacleOppositePathArr[i].setY(y+2);
                        Thread.sleep(10);

                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        });t.start();
	}
	
	public static int getRandom(int[] arr) {
		int rnd = new Random().nextInt(arr.length);
		return arr[rnd];
	}

	public void limits() {
		if (this.rectangle.getX() < 210 || this.car1.getX() < 210) {
			this.rectangle.setX(210);
			this.car1.setX(210);
		}

		if (this.rectangle.getX() > 670 || this.car1.getX() > 670) {
			this.rectangle.setX(670);
			this.car1.setX(670);
		}

		if (this.rectangle.getY() < 0 || this.car1.getY() < 0) {
			this.rectangle.setY(0);
			this.car1.setY(0);
		}

		if (this.rectangle.getY() > 490 || this.car1.getY() > 490) {
			this.rectangle.setY(490);
			this.car1.setY(490);
		}
	}

	protected void paintComponent(Graphics g) {
		super.paintComponent(g);
		for (int i = 0; i < carObstacleArr.length; i++) {
			this.rectangleObstacleArr[i].paint(g);
			this.rectangleObstacleOppositePathArr[i].paint(g);
		}
		this.roadBackgroung.paintIcon(this, g, 0, 0);
		this.car1.paint(g);
		this.rectangle.paint(g);
		

		for (int i = 0; i < carObstacleArr.length; i++) {
			{
				this.carObstacleArr[i].paint(g);
				this.carObstacleOppositePathArr[i].paint(g);
			}
		}
	}

	public void mainGameLoop() {
		Thread thred = new Thread(() -> {
			PlayerMovement playerMovement = new PlayerMovement(this.car1, this.rectangle);
			this.setFocusable(true);
			this.requestFocus();
			this.addKeyListener(playerMovement);
			first :
			while (true) {
				try {
					for (int i = 0; i < rectangleObstacleOppositePathArr.length; i++) {
						if (rectangle.checkColision1(rectangleObstacleOppositePathArr[i])) {
							EndPanel panel = new EndPanel();
							this.add(panel);
							break first ;
						}
					}
					for (int i = 0; i < rectangleObstacleArr.length; i++) {
						if(rectangle.checkColision2(rectangleObstacleArr[i])) {
							break first ;
						}
					}
					//this.moveTheCars();
				}catch(Exception e) {
					e.printStackTrace();
				}
				try {

					Thread.sleep(1);
					this.counter++;
					nameTextField.setText(String.valueOf(counter));
					System.out.println(counter);
					repaint();
					this.limits();
					for (int i = 0; i < carObstacleArr.length; i++) {

					}
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		});
		thred.start();
	}

}
